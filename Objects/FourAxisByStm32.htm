<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\FourAxisByStm32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\FourAxisByStm32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Dec 02 12:53:50 2016
<BR><P>
<H3>Maximum Stack Usage =        516 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; IMU::UpdateIMU() &rArr; AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float) &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from interrupt.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from interrupt.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from interrupt.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from interrupt.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from interrupt.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from interrupt.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from interrupt.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from interrupt.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from interrupt.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from interrupt.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from interrupt.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from interrupt.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from taskmanager.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from interrupt.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from interrupt.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from interrupt.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">SPI::~SPI()</a> from spi.o(i._ZN3SPID1Ev) referenced from main.o(i.__sti___8_main_cpp_iic)
 <LI><a href="#[3a]">USART::~USART()</a> from usart.o(i._ZN5USARTD1Ev) referenced from main.o(i.__sti___8_main_cpp_iic)
 <LI><a href="#[39]">mpu6050::~mpu6050()</a> from mpu6050.o(i._ZN7mpu6050D1Ev) referenced from main.o(i.__sti___8_main_cpp_iic)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3c]">__sti___15_TaskManager_cpp_tskmgr</a> from taskmanager.o(i.__sti___15_TaskManager_cpp_tskmgr) referenced from taskmanager.o(.init_array)
 <LI><a href="#[3d]">__sti___8_main_cpp_iic</a> from main.o(i.__sti___8_main_cpp_iic) referenced from main.o(.init_array)
 <LI><a href="#[36]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[64]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[145]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[41]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[146]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[147]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[148]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[42]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[149]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Put(const I2C_Command_Struct&)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetCEPin(GPIO_TypeDef*, unsigned short)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::DataListening()
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3e]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, float)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(float, float, float, float)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, float)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(float, float, float, float)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::TimeSlice(double&, double)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayMs(unsigned short)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayS(unsigned short)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Updated()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::init()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyr()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyrDegree()
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayMs(unsigned short)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, float)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(float, float, float, float)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyr()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyrDegree()
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayMs(unsigned short)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayS(unsigned short)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, float)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(float, float, float, float)
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(double)
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::init()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetUpdateInterval()
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayMs(unsigned short)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayS(unsigned short)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::init()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::TimeSlice(double&, double)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::init()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyr()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetUpdateInterval()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyrDegree()
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[14f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[150]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[151]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[43]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[4c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[4b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[136]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[153]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_fsqrt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[63]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[54]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[53]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[154]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; USART::DmaIrq() &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, interrupt.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; USART::DmaIrq() &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaTxIRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; I2C::DmaRxIRQ() &rArr; FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaTxIRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, interrupt.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; USART::DmaIrq() &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
</UL>

<P><STRONG><a name="[106]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
</UL>

<P><STRONG><a name="[b6]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[b1]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
</UL>

<P><STRONG><a name="[bd]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
</UL>

<P><STRONG><a name="[105]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
</UL>

<P><STRONG><a name="[f8]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b3]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupt.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI2_IRQHandler &rArr; NRF24L01::IRQIrq() &rArr; NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01::NRF_SendData(unsigned char*, unsigned) &rArr; SPI::SendData(unsigned char*, unsigned) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)
</UL>

<P><STRONG><a name="[12a]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
</UL>

<P><STRONG><a name="[131]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)
</UL>

<P><STRONG><a name="[130]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2CGPIODeInit(unsigned short, unsigned short)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2CGPIOInit(unsigned short, unsigned short)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2CGPIOInit(unsigned short, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[fc]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetLevel()
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetLevel(unsigned char)
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetLevel(unsigned char)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C1_ER_IRQHandler &rArr; I2C::ErrorIRQ()
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::ErrorIRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C1_EV_IRQHandler &rArr; I2C::EventIRQ() &rArr; Sensor::Updated() &rArr; TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.I2C2_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_ER_IRQHandler &rArr; I2C::ErrorIRQ()
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::ErrorIRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C2_EV_IRQHandler &rArr; I2C::EventIRQ() &rArr; Sensor::Updated() &rArr; TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
</UL>

<P><STRONG><a name="[a6]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
</UL>

<P><STRONG><a name="[b7]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
</UL>

<P><STRONG><a name="[a3]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
</UL>

<P><STRONG><a name="[b8]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_i2c.o(i.I2C_GetLastEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetLastEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
</UL>

<P><STRONG><a name="[6b]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
</UL>

<P><STRONG><a name="[bb]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
</UL>

<P><STRONG><a name="[b9]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
</UL>

<P><STRONG><a name="[ba]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
</UL>

<P><STRONG><a name="[b4]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[c1]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(unsigned char, bool, unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[b2]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[a8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::RCC_Configuration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[ac]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[7e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2CGPIOInit(unsigned short, unsigned short)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::RCC_Configuration()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::RCC_Configuration()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[75]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[6c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6e]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[7d]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[77]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[76]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[79]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[78]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[7b]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[7a]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[7c]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[6d]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
</UL>

<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI1_IRQHandler &rArr; SPI::SpiIrq() &rArr; SPI_I2S_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI2_IRQHandler &rArr; SPI::SpiIrq() &rArr; SPI_I2S_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SetSpeed(unsigned char)
</UL>

<P><STRONG><a name="[f9]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e7]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[f7]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e3]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI_RW(unsigned char)
</UL>

<P><STRONG><a name="[e6]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(i.SPI_I2S_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_I2S_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[eb]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_I2S_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_I2S_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[e5]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI_RW(unsigned char)
</UL>

<P><STRONG><a name="[e4]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI_RW(unsigned char)
</UL>

<P><STRONG><a name="[f6]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, taskmanager.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[d4]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[d8]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[d5]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[d9]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[d6]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[da]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[d7]"></a>TIM_OC4Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[db]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[d3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; USART::Irq() &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_IRQHandler &rArr; USART::Irq() &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupt.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART3_IRQHandler &rArr; USART::Irq() &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[10e]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[10f]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[10b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[fd]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
</UL>

<P><STRONG><a name="[104]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[73]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[fe]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
</UL>

<P><STRONG><a name="[103]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[74]"></a>RCC_Configuration()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(i._Z17RCC_Configurationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_Configuration() &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>TaskManager::Time()</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, taskmanager.o(i._ZN11TaskManager4TimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::TimeSlice(double&, double)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayMs(unsigned short)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayS(unsigned short)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Updated()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::init()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[81]"></a>TaskManager::DelayS(unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, taskmanager.o(i._ZN11TaskManager6DelaySEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TaskManager::DelayS(unsigned short) &rArr; TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>TaskManager::DelayMs(unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, taskmanager.o(i._ZN11TaskManager7DelayMsEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TaskManager::DelayMs(unsigned short) &rArr; TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>TaskManager::TimeSlice(double&, double)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, taskmanager.o(i._ZN11TaskManager9TimeSliceERdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TaskManager::TimeSlice(double&, double) &rArr; TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>TaskManager::TaskManager()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, taskmanager.o(i._ZN11TaskManagerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TaskManager_cpp_tskmgr
</UL>

<P><STRONG><a name="[156]"></a>TaskManager::TaskManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, taskmanager.o(i._ZN11TaskManagerC1Ev), UNUSED)

<P><STRONG><a name="[89]"></a>Communication::Calibration(unsigned char*, int, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, communication.o(i._ZN13Communication11CalibrationEPhih))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Communication::Calibration(unsigned char*, int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::DataListening()
</UL>

<P><STRONG><a name="[85]"></a>Communication::DataListening()</STRONG> (Thumb, 556 bytes, Stack size 56 bytes, communication.o(i._ZN13Communication13DataListeningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Communication::DataListening() &rArr; NRF24L01::GetReceivedData(unsigned char*, unsigned short) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::ClearReceiveBuffer()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::ReceiveBufferSize()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::GetReceivedData(unsigned char*, unsigned short)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::Calibration(unsigned char*, int, unsigned char)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>Communication::Communication(NRF24L01&)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, communication.o(i._ZN13CommunicationC1ER8NRF24L01))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[157]"></a>Communication::Communication__sub_object(NRF24L01&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, communication.o(i._ZN13CommunicationC1ER8NRF24L01), UNUSED)

<P><STRONG><a name="[8b]"></a>AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)</STRONG> (Thumb, 582 bytes, Stack size 88 bytes, attitude.o(i._ZN19AttitudeCalculation20NonlinearSO3AHRSinitEffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float) &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[91]"></a>AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 2430 bytes, Stack size 112 bytes, attitude.o(i._ZN19AttitudeCalculation22NonlinearSO3AHRSupdateEffffffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float) &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
</UL>

<P><STRONG><a name="[96]"></a>AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)</STRONG> (Thumb, 376 bytes, Stack size 88 bytes, attitude.o(i._ZN19AttitudeCalculation8GetAngleE7Vector3IiES0_IfEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float) &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::asin(float)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
</UL>

<P><STRONG><a name="[98]"></a>I2C::AddCommand(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char, bool, Sensor*)</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, i2c.o(i._ZN3I2C10AddCommandEhhPhhS0_hbP6Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C::AddCommand(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char, bool, Sensor*) &rArr; FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Put(const I2C_Command_Struct&)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Put(const I2C_Command_Struct&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Init(bool)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::BypassMode(bool)
</UL>

<P><STRONG><a name="[a1]"></a>I2C::Soft_Reset()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c.o(i._ZN3I2C10Soft_ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::ErrorIRQ()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
</UL>

<P><STRONG><a name="[9a]"></a>I2C::I2CGPIOInit(unsigned short, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, i2c.o(i._ZN3I2C11I2CGPIOInitEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C::I2CGPIOInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
</UL>

<P><STRONG><a name="[9d]"></a>I2C::ClearCommand()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c.o(i._ZN3I2C12ClearCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C::ClearCommand()
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::WaitTransmitComplete(bool, bool, bool)
</UL>

<P><STRONG><a name="[b0]"></a>I2C::GetI2CNumber()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(i._ZN3I2C12GetI2CNumberEv))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
</UL>

<P><STRONG><a name="[9f]"></a>I2C::I2CGPIODeInit(unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, i2c.o(i._ZN3I2C13I2CGPIODeInitEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[a0]"></a>I2C::StartCMDQueue()</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, i2c.o(i._ZN3I2C13StartCMDQueueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C::StartCMDQueue() &rArr; FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Size()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Soft_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::WaitTransmitComplete(bool, bool, bool)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Init(bool)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::BypassMode(bool)
</UL>

<P><STRONG><a name="[a7]"></a>I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, i2c.o(i._ZN3I2C18I2C_CHACK_BUSY_FIXEjtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DelayUs(unsigned)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2CGPIODeInit(unsigned short, unsigned short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
</UL>

<P><STRONG><a name="[ad]"></a>I2C::WaitTransmitComplete(bool, bool, bool)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, i2c.o(i._ZN3I2C20WaitTransmitCompleteEbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = I2C::WaitTransmitComplete(bool, bool, bool) &rArr; I2C::Init() &rArr; I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::IsSendOk()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::ClearCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Init(bool)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::BypassMode(bool)
</UL>

<P><STRONG><a name="[af]"></a>I2C::Init()</STRONG> (Thumb, 548 bytes, Stack size 104 bytes, i2c.o(i._ZN3I2C4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C::Init() &rArr; I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::GetI2CNumber()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2CGPIOInit(unsigned short, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Soft_Reset()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(unsigned char, bool, unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::WaitTransmitComplete(bool, bool, bool)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[aa]"></a>I2C::DelayUs(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, i2c.o(i._ZN3I2C7DelayUsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C::DelayUs(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay::Us(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[67]"></a>I2C::DmaRxIRQ()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, i2c.o(i._ZN3I2C8DmaRxIRQEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C::DmaRxIRQ() &rArr; FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Size()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>I2C::DmaTxIRQ()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(i._ZN3I2C8DmaTxIRQEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>I2C::ErrorIRQ()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, i2c.o(i._ZN3I2C8ErrorIRQEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C::ErrorIRQ()
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Soft_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>I2C::EventIRQ()</STRONG> (Thumb, 1100 bytes, Stack size 8 bytes, i2c.o(i._ZN3I2C8EventIRQEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2C::EventIRQ() &rArr; Sensor::Updated() &rArr; TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Size()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Updated()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Soft_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>I2C::IsHealth()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(i._ZN3I2C8IsHealthEv))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::IsSendOk()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetHealth()
</UL>

<P><STRONG><a name="[ae]"></a>I2C::IsSendOk()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c.o(i._ZN3I2C8IsSendOkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C::IsSendOk()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Size()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::IsHealth()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::WaitTransmitComplete(bool, bool, bool)
</UL>

<P><STRONG><a name="[bf]"></a>I2C::I2C(unsigned char, bool, unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, i2c.o(i._ZN3I2CC1Ehbjhhhhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = I2C::I2C(unsigned char, bool, unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2C::Init() &rArr; I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::FIFOBuffer()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[158]"></a>I2C::I2C__sub_object(unsigned char, bool, unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, i2c.o(i._ZN3I2CC1Ehbjhhhhhhhh), UNUSED)

<P><STRONG><a name="[c2]"></a>IMU::IMU_Filter()</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, imu.o(i._ZN3IMU10IMU_FilterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IMU::IMU_Filter() &rArr; mpu6050::GetAccRaw()
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetAccRaw()
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
</UL>

<P><STRONG><a name="[c4]"></a>IMU::GyroCalibrate()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, imu.o(i._ZN3IMU13GyroCalibrateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IMU::GyroCalibrate()
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::StartGyroCalibrate()
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>IMU::GyroIsCalibrated()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, imu.o(i._ZN3IMU16GyroIsCalibratedEv))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>IMU::init()</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, imu.o(i._ZN3IMU4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = IMU::init() &rArr; mpu6050::Init(bool) &rArr; mpu6050::BypassMode(bool) &rArr; I2C::WaitTransmitComplete(bool, bool, bool) &rArr; I2C::Init() &rArr; I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(const char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Init(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>IMU::UpdateIMU()</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, imu.o(i._ZN3IMU9UpdateIMUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = IMU::UpdateIMU() &rArr; AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float) &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(const char*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::IMU_Filter()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyr()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::IsGyroCalibrating()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetUpdateInterval()
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>IMU::IMU(mpu6050&)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, imu.o(i._ZN3IMUC1ER7mpu6050))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IMU::IMU(mpu6050&)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[159]"></a>IMU::IMU__sub_object(mpu6050&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, imu.o(i._ZN3IMUC1ER7mpu6050), UNUSED)

<P><STRONG><a name="[d0]"></a>LED::On()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i._ZN3LED2OnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED::On() &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetLevel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>LED::LED(GPIO&, bool)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i._ZN3LEDC1ER4GPIOb))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[15a]"></a>LED::LED__sub_object(GPIO&, bool)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led.o(i._ZN3LEDC1ER4GPIOb), UNUSED)

<P><STRONG><a name="[d2]"></a>PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)</STRONG> (Thumb, 846 bytes, Stack size 72 bytes, f103_pwm.o(i._ZN3PWM10InitializeEP11TIM_TypeDefbbbbth))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[dd]"></a>PWM::SetDuty(float, float, float, float)</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, f103_pwm.o(i._ZN3PWM7SetDutyEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM::SetDuty(float, float, float, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[df]"></a>PWM::SetDuty(unsigned char, float)</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, f103_pwm.o(i._ZN3PWM7SetDutyEhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWM::SetDuty(unsigned char, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>PWM::PWM(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, f103_pwm.o(i._ZN3PWMC1EP11TIM_TypeDefbbbbth))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PWM::PWM(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char) &rArr; PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::Initialize(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[15b]"></a>PWM::PWM__sub_object(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, f103_pwm.o(i._ZN3PWMC1EP11TIM_TypeDefbbbbth), UNUSED)

<P><STRONG><a name="[e1]"></a>SPI::RCC_Configuration()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi.o(i._ZN3SPI17RCC_ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI::RCC_Configuration()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e2]"></a>SPI::SPI_RW(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi.o(i._ZN3SPI6SPI_RWEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI::SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SPI_NRF_RW(unsigned char)
</UL>

<P><STRONG><a name="[6f]"></a>SPI::SpiIrq()</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, spi.o(i._ZN3SPI6SpiIrqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI::SpiIrq() &rArr; SPI_I2S_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetITStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearITPendingBit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Size()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Put(const unsigned char&)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Get(unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>SPI::SendData(unsigned char*, unsigned)</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, spi.o(i._ZN3SPI8SendDataEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI::SendData(unsigned char*, unsigned) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearITPendingBit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Size()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Gets(unsigned char*, unsigned short)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Get(unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[ef]"></a>SPI::SetSpeed(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi.o(i._ZN3SPI8SetSpeedEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI::SetSpeed(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Check()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_RX_Mode()
</UL>

<P><STRONG><a name="[f1]"></a>SPI::SetCSNPin(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi.o(i._ZN3SPI9SetCSNPinEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI::SetCSNPin(unsigned char) &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetLevel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_HIGH()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_LOW()
</UL>

<P><STRONG><a name="[f2]"></a>SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 924 bytes, Stack size 136 bytes, spi.o(i._ZN3SPIC1EP11SPI_TypeDefbhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetITStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearITPendingBit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearFlag
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::FIFOBuffer()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::RCC_Configuration()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[15c]"></a>SPI::SPI__sub_object(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 136 bytes, spi.o(i._ZN3SPIC1EP11SPI_TypeDefbhhhhh), UNUSED)

<P><STRONG><a name="[3b]"></a>SPI::~SPI()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spi.o(i._ZN3SPID1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_iic)
</UL>
<P><STRONG><a name="[15d]"></a>SPI::~SPI__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, spi.o(i._ZN3SPID1Ev), UNUSED)

<P><STRONG><a name="[fa]"></a>GPIO::RCC_Configuration()</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gpio.o(i._ZN4GPIO17RCC_ConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO::RCC_Configuration()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)
</UL>

<P><STRONG><a name="[fb]"></a>GPIO::GetLevel()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i._ZN4GPIO8GetLevelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO::GetLevel()
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
</UL>

<P><STRONG><a name="[d1]"></a>GPIO::SetLevel(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i._ZN4GPIO8SetLevelEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CE_HIGH()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CE_LOW()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SetCSNPin(unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::On()
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, gpio.o(i._ZN4GPIOC1EP12GPIO_TypeDeft16GPIOMode_TypeDef17GPIOSpeed_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::RCC_Configuration()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF24L01(SPI&)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetCEPin(GPIO_TypeDef*, unsigned short)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[15e]"></a>GPIO::GPIO__sub_object(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, gpio.o(i._ZN4GPIOC1EP12GPIO_TypeDeft16GPIOMode_TypeDef17GPIOSpeed_TypeDef), UNUSED)

<P><STRONG><a name="[b5]"></a>Delay::Us(unsigned)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, delay.o(i._ZN5Delay2UsEj))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DelayUs(unsigned)
</UL>

<P><STRONG><a name="[72]"></a>USART::Irq()</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usart.o(i._ZN5USART3IrqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART::Irq() &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Size()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Put(const unsigned char&)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Get(unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>USART::DmaIrq()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usart.o(i._ZN5USART6DmaIrqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART::DmaIrq() &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Size()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>USART::SendData(unsigned char*, unsigned)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, usart.o(i._ZN5USART8SendDataEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART::SendData(unsigned char*, unsigned) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Size()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Puts(unsigned char*, unsigned short)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Gets(unsigned char*, unsigned short)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Get(unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(int)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(double)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(const char*)
</UL>

<P><STRONG><a name="[10c]"></a>USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 884 bytes, Stack size 136 bytes, usart.o(i._ZN5USARTC1Ehjbhhhhhttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::FIFOBuffer()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[15f]"></a>USART::USART__sub_object(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 136 bytes, usart.o(i._ZN5USARTC1Ehjbhhhhhttt), UNUSED)

<P><STRONG><a name="[3a]"></a>USART::~USART()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usart.o(i._ZN5USARTD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_iic)
</UL>
<P><STRONG><a name="[160]"></a>USART::~USART__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usart.o(i._ZN5USARTD1Ev), UNUSED)

<P><STRONG><a name="[c8]"></a>USART::operator &lang;&lang;(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart.o(i._ZN5USARTlsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART::operator &lang;&lang;(const char*) &rArr; USART::SendData(unsigned char*, unsigned) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::init()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[110]"></a>USART::operator &lang;&lang;(double)</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, usart.o(i._ZN5USARTlsEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART::operator &lang;&lang;(double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>USART::operator &lang;&lang;(int)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, usart.o(i._ZN5USARTlsEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART::operator &lang;&lang;(int) &rArr; USART::SendData(unsigned char*, unsigned) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[13f]"></a>flash::flash(unsigned, bool)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flash.o(i._ZN5flashC1Ejb))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[161]"></a>flash::flash__sub_object(unsigned, bool)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, flash.o(i._ZN5flashC1Ejb), UNUSED)

<P><STRONG><a name="[bc]"></a>Sensor::Updated()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, i2c.o(i._ZN6Sensor7UpdatedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Sensor::Updated() &rArr; TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
</UL>

<P><STRONG><a name="[112]"></a>Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 862 bytes, Stack size 104 bytes, control.o(i._ZN7Control12CtrlAttiRateE7Vector3IfES1_tttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; TaskManager::Time() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, float)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(float, float, float, float)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>Control::Control(PWM&, PWM&)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, control.o(i._ZN7ControlC1ER3PWMS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Control::Control(PWM&, PWM&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[162]"></a>Control::Control__sub_object(PWM&, PWM&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, control.o(i._ZN7ControlC1ER3PWMS1_), UNUSED)

<P><STRONG><a name="[116]"></a>mpu6050::BypassMode(bool)</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, mpu6050.o(i._ZN7mpu605010BypassModeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mpu6050::BypassMode(bool) &rArr; I2C::WaitTransmitComplete(bool, bool, bool) &rArr; I2C::Init() &rArr; I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::WaitTransmitComplete(bool, bool, bool)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::AddCommand(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char, bool, Sensor*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Init(bool)
</UL>

<P><STRONG><a name="[117]"></a>mpu6050::GetGyrDegree()</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, mpu6050.o(i._ZN7mpu605012GetGyrDegreeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu6050::GetGyrDegree() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>mpu6050::GetUpdateInterval()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7mpu605017GetUpdateIntervalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpu6050::GetUpdateInterval() &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
</UL>

<P><STRONG><a name="[cb]"></a>mpu6050::IsGyroCalibrating()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpu6050.o(i._ZN7mpu605017IsGyroCalibratingEv))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
</UL>

<P><STRONG><a name="[c5]"></a>mpu6050::StartGyroCalibrate()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpu6050.o(i._ZN7mpu605018StartGyroCalibrateEv))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::GyroCalibrate()
</UL>

<P><STRONG><a name="[c7]"></a>mpu6050::Init(bool)</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, mpu6050.o(i._ZN7mpu60504InitEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mpu6050::Init(bool) &rArr; mpu6050::BypassMode(bool) &rArr; I2C::WaitTransmitComplete(bool, bool, bool) &rArr; I2C::Init() &rArr; I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::WaitTransmitComplete(bool, bool, bool)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::AddCommand(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char, bool, Sensor*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::BypassMode(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::init()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[cd]"></a>mpu6050::GetGyr()</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, mpu6050.o(i._ZN7mpu60506GetGyrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu6050::GetGyr() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
</UL>

<P><STRONG><a name="[ca]"></a>mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)</STRONG> (Thumb, 670 bytes, Stack size 64 bytes, mpu6050.o(i._ZN7mpu60506UpdateEbP7Vector3IiES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*) &rArr; mpu6050::Init(bool) &rArr; mpu6050::BypassMode(bool) &rArr; I2C::WaitTransmitComplete(bool, bool, bool) &rArr; I2C::Init() &rArr; I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::Time()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::Init()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::WaitTransmitComplete(bool, bool, bool)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::AddCommand(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char, bool, Sensor*)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;int&rang;::Vector3()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(const char*)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;int&rang;::operator =(const Vector3&lang;int&rang;&)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetHealth()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyrRaw()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetAccRaw()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Init(bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
</UL>

<P><STRONG><a name="[c3]"></a>mpu6050::GetAccRaw()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mpu6050.o(i._ZN7mpu60509GetAccRawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpu6050::GetAccRaw()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;int&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::IMU_Filter()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[11a]"></a>mpu6050::GetGyrRaw()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mpu6050.o(i._ZN7mpu60509GetGyrRawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu6050::GetGyrRaw()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[118]"></a>mpu6050::GetHealth()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mpu6050.o(i._ZN7mpu60509GetHealthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu6050::GetHealth()
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::IsHealth()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[11d]"></a>mpu6050::mpu6050(I2C&, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7mpu6050C1ER3I2Ct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpu6050::mpu6050(I2C&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;int&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[163]"></a>mpu6050::mpu6050__sub_object(I2C&, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7mpu6050C1ER3I2Ct), UNUSED)

<P><STRONG><a name="[39]"></a>mpu6050::~mpu6050()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mpu6050.o(i._ZN7mpu6050D1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_iic)
</UL>
<P><STRONG><a name="[164]"></a>mpu6050::~mpu6050__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mpu6050.o(i._ZN7mpu6050D1Ev), UNUSED)

<P><STRONG><a name="[11e]"></a>NRF24L01::NRF_CE_LOW()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf24l01.o(i._ZN8NRF24L0110NRF_CE_LOWEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01::NRF_CE_LOW() &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetLevel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF24L01(SPI&)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Reset()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_RX_Mode()
</UL>

<P><STRONG><a name="[11f]"></a>NRF24L01::SPI_NRF_RW(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf24l01.o(i._ZN8NRF24L0110SPI_NRF_RWEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01::SPI_NRF_RW(unsigned char) &rArr; SPI::SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteReg(unsigned char, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadReg(unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadBuf(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[120]"></a>NRF24L01::NRF_CE_HIGH()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf24l01.o(i._ZN8NRF24L0111NRF_CE_HIGHEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01::NRF_CE_HIGH() &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetLevel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_RX_Mode()
</UL>

<P><STRONG><a name="[121]"></a>NRF24L01::NRF_CSN_LOW()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf24l01.o(i._ZN8NRF24L0111NRF_CSN_LOWEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01::NRF_CSN_LOW() &rArr; SPI::SetCSNPin(unsigned char) &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SetCSNPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteReg(unsigned char, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadReg(unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadBuf(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[122]"></a>NRF24L01::NRF_RX_Mode()</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, nrf24l01.o(i._ZN8NRF24L0111NRF_RX_ModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NRF24L01::NRF_RX_Mode() &rArr; NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01::NRF_SendData(unsigned char*, unsigned) &rArr; SPI::SendData(unsigned char*, unsigned) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteReg(unsigned char, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CE_HIGH()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CE_LOW()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SetSpeed(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>NRF24L01::NRF_ReadBuf(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, nrf24l01.o(i._ZN8NRF24L0111NRF_ReadBufEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NRF24L01::NRF_ReadBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01::NRF_CSN_HIGH() &rArr; SPI::SetCSNPin(unsigned char) &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_HIGH()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_LOW()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SPI_NRF_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Check()
</UL>

<P><STRONG><a name="[127]"></a>NRF24L01::NRF_ReadReg(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf24l01.o(i._ZN8NRF24L0111NRF_ReadRegEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NRF24L01::NRF_ReadReg(unsigned char) &rArr; NRF24L01::NRF_CSN_HIGH() &rArr; SPI::SetCSNPin(unsigned char) &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_HIGH()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_LOW()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SPI_NRF_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Reset()
</UL>

<P><STRONG><a name="[126]"></a>NRF24L01::NRF_CSN_HIGH()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf24l01.o(i._ZN8NRF24L0112NRF_CSN_HIGHEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01::NRF_CSN_HIGH() &rArr; SPI::SetCSNPin(unsigned char) &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SetCSNPin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF24L01(SPI&)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Reset()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteReg(unsigned char, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadReg(unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadBuf(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[128]"></a>NRF24L01::NRF_SendData(unsigned char*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf24l01.o(i._ZN8NRF24L0112NRF_SendDataEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NRF24L01::NRF_SendData(unsigned char*, unsigned) &rArr; SPI::SendData(unsigned char*, unsigned) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[123]"></a>NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf24l01.o(i._ZN8NRF24L0112NRF_WriteBufEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01::NRF_SendData(unsigned char*, unsigned) &rArr; SPI::SendData(unsigned char*, unsigned) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_SendData(unsigned char*, unsigned)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_HIGH()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_LOW()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SPI_NRF_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Check()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_RX_Mode()
</UL>

<P><STRONG><a name="[124]"></a>NRF24L01::NRF_WriteReg(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrf24l01.o(i._ZN8NRF24L0112NRF_WriteRegEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NRF24L01::NRF_WriteReg(unsigned char, unsigned char) &rArr; NRF24L01::NRF_CSN_HIGH() &rArr; SPI::SetCSNPin(unsigned char) &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_HIGH()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_LOW()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SPI_NRF_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Reset()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_RX_Mode()
</UL>

<P><STRONG><a name="[88]"></a>NRF24L01::GetReceivedData(unsigned char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf24l01.o(i._ZN8NRF24L0115GetReceivedDataEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NRF24L01::GetReceivedData(unsigned char*, unsigned short) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Size()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::DataListening()
</UL>

<P><STRONG><a name="[87]"></a>NRF24L01::ReceiveBufferSize()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf24l01.o(i._ZN8NRF24L0117ReceiveBufferSizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NRF24L01::ReceiveBufferSize()
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Size()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::DataListening()
</UL>

<P><STRONG><a name="[8a]"></a>NRF24L01::ClearReceiveBuffer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf24l01.o(i._ZN8NRF24L0118ClearReceiveBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NRF24L01::ClearReceiveBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::DataListening()
</UL>

<P><STRONG><a name="[68]"></a>NRF24L01::IRQIrq()</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, nrf24l01.o(i._ZN8NRF24L016IRQIrqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NRF24L01::IRQIrq() &rArr; NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01::NRF_SendData(unsigned char*, unsigned) &rArr; SPI::SendData(unsigned char*, unsigned) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetLevel()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteReg(unsigned char, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadReg(unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Size()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>NRF24L01::SetCEPin(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrf24l01.o(i._ZN8NRF24L018SetCEPinEP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NRF24L01::SetCEPin(GPIO_TypeDef*, unsigned short) &rArr; GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF24L01(SPI&)
</UL>

<P><STRONG><a name="[12d]"></a>NRF24L01::NRF_Check()</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nrf24l01.o(i._ZN8NRF24L019NRF_CheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NRF24L01::NRF_Check() &rArr; NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01::NRF_SendData(unsigned char*, unsigned) &rArr; SPI::SendData(unsigned char*, unsigned) &rArr; FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SetSpeed(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>NRF24L01::NRF_Reset()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf24l01.o(i._ZN8NRF24L019NRF_ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NRF24L01::NRF_Reset() &rArr; NRF24L01::NRF_WriteReg(unsigned char, unsigned char) &rArr; NRF24L01::NRF_CSN_HIGH() &rArr; SPI::SetCSNPin(unsigned char) &rArr; GPIO::SetLevel(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_WriteReg(unsigned char, unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_HIGH()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_ReadReg(unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CE_LOW()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF24L01(SPI&)
</UL>

<P><STRONG><a name="[12f]"></a>NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, nrf24l01.o(i._ZN8NRF24L019SetIRQPinEP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short) &rArr; GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF24L01(SPI&)
</UL>

<P><STRONG><a name="[132]"></a>NRF24L01::NRF24L01(SPI&)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrf24l01.o(i._ZN8NRF24L01C1ER3SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NRF24L01::NRF24L01(SPI&) &rArr; NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short) &rArr; GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetIRQPin(GPIO_TypeDef*, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Reset()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::SetCEPin(GPIO_TypeDef*, unsigned short)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CSN_HIGH()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_CE_LOW()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::FIFOBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_iic
</UL>

<P><STRONG><a name="[165]"></a>NRF24L01::NRF24L01__sub_object(SPI&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, nrf24l01.o(i._ZN8NRF24L01C1ER3SPI), UNUSED)

<P><STRONG><a name="[97]"></a>std::asin(float)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, attitude.o(i._ZSt4asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::asin(float) &rArr; asinf &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
</UL>

<P><STRONG><a name="[114]"></a>std::fabs(float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, control.o(i._ZSt4fabsf))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[93]"></a>std::sqrt(float)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, attitude.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::sqrt(float) &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[8c]"></a>std::atan2(float, float)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, attitude.o(i._ZSt5atan2ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = std::atan2(float, float) &rArr; atan2f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[140]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[11b]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[135]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[137]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[138]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[139]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[13a]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[166]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[167]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[168]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[141]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[133]"></a>asinf</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, asinf.o(i.asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = asinf &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::asin(float)
</UL>

<P><STRONG><a name="[90]"></a>atan2f</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = atan2f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[8d]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[61]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = main &rArr; IMU::UpdateIMU() &rArr; AttitudeCalculation::GetAngle(Vector3&lang;int&rang;, Vector3&lang;float&rang;, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSupdate(float, float, float, float, float, float, float, float, float, float, float, float) &rArr; AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float) &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::TimeSlice(double&, double)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayMs(unsigned short)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::DelayS(unsigned short)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetLevel(unsigned char)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::SetDuty(unsigned char, float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_Check()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF_RX_Mode()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::On()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(int)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(double)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::operator &lang;&lang;(const char*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::CtrlAttiRate(Vector3&lang;float&rang;, Vector3&lang;float&rang;, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::DataListening()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::UpdateIMU()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::init()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::GyroIsCalibrated()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::GyroCalibrate()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Init(bool)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyrDegree()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[48]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[8e]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttitudeCalculation::NonlinearSO3AHRSinit(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[134]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[a4]"></a>FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2c.o(t._ZN10FIFOBufferI18I2C_Command_StructLt40EE3GetERS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Get(I2C_Command_Struct&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
</UL>

<P><STRONG><a name="[99]"></a>FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Put(const I2C_Command_Struct&)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, i2c.o(t._ZN10FIFOBufferI18I2C_Command_StructLt40EE3PutERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Put(const I2C_Command_Struct&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::AddCommand(unsigned char, unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char, bool, Sensor*)
</UL>

<P><STRONG><a name="[a2]"></a>FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Size()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(t._ZN10FIFOBufferI18I2C_Command_StructLt40EE4SizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::IsSendOk()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::EventIRQ()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::DmaRxIRQ()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::StartCMDQueue()
</UL>

<P><STRONG><a name="[9e]"></a>FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::Clear()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(t._ZN10FIFOBufferI18I2C_Command_StructLt40EE5ClearEv))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::ClearCommand()
</UL>

<P><STRONG><a name="[c0]"></a>FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::FIFOBuffer()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(t._ZN10FIFOBufferI18I2C_Command_StructLt40EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(unsigned char, bool, unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[169]"></a>FIFOBuffer&lang;I2C_Command_Struct, (unsigned short)40&rang;::FIFOBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, i2c.o(t._ZN10FIFOBufferI18I2C_Command_StructLt40EEC1Ev), UNUSED)

<P><STRONG><a name="[102]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Get(unsigned char&)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart.o(t._ZN10FIFOBufferIhLt128EE3GetERh))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[ff]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Put(const unsigned char&)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usart.o(t._ZN10FIFOBufferIhLt128EE3PutERKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Put(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
</UL>

<P><STRONG><a name="[108]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Gets(unsigned char*, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, usart.o(t._ZN10FIFOBufferIhLt128EE4GetsEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[10a]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Puts(unsigned char*, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usart.o(t._ZN10FIFOBufferIhLt128EE4PutsEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[101]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::Size()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(t._ZN10FIFOBufferIhLt128EE4SizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::DmaIrq()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Irq()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[10d]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::FIFOBuffer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(t._ZN10FIFOBufferIhLt128EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[16a]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)128&rang;::FIFOBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usart.o(t._ZN10FIFOBufferIhLt128EEC1Ev), UNUSED)

<P><STRONG><a name="[ea]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Get(unsigned char&)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, spi.o(t._ZN10FIFOBufferIhLt64EE3GetERh))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[e8]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Put(const unsigned char&)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi.o(t._ZN10FIFOBufferIhLt64EE3PutERKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Put(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
</UL>

<P><STRONG><a name="[ee]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Gets(unsigned char*, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, spi.o(t._ZN10FIFOBufferIhLt64EE4GetsEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Gets(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::GetReceivedData(unsigned char*, unsigned short)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[ed]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi.o(t._ZN10FIFOBufferIhLt64EE4PutsEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Puts(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[e9]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Size()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(t._ZN10FIFOBufferIhLt64EE4SizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::IRQIrq()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SpiIrq()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::ReceiveBufferSize()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::GetReceivedData(unsigned char*, unsigned short)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SendData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[129]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::Clear()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(t._ZN10FIFOBufferIhLt64EE5ClearEv))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::ClearReceiveBuffer()
</UL>

<P><STRONG><a name="[f3]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::FIFOBuffer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(t._ZN10FIFOBufferIhLt64EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF24L01(SPI&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16b]"></a>FIFOBuffer&lang;unsigned char, (unsigned short)64&rang;::FIFOBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, spi.o(t._ZN10FIFOBufferIhLt64EEC1Ev), UNUSED)

<P><STRONG><a name="[cf]"></a>Vector3&lang;float&rang;::Vector3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6050.o(t._ZN7Vector3IfEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::IMU(mpu6050&)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyr()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetGyrDegree()
</UL>

<P><STRONG><a name="[16c]"></a>Vector3&lang;float&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mpu6050.o(t._ZN7Vector3IfEC1Ev), UNUSED)

<P><STRONG><a name="[11c]"></a>Vector3&lang;int&rang;::Vector3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hmc5883l.o(t._ZN7Vector3IiEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050(I2C&, unsigned short)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::GetAccRaw()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>

<P><STRONG><a name="[16d]"></a>Vector3&lang;int&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hmc5883l.o(t._ZN7Vector3IiEC1Ev), UNUSED)

<P><STRONG><a name="[119]"></a>Vector3&lang;int&rang;::operator =(const Vector3&lang;int&rang;&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpu6050.o(t._ZN7Vector3IiEaSERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::Update(bool, Vector3&lang;int&rang;*, Vector3&lang;int&rang;*)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3c]"></a>__sti___15_TaskManager_cpp_tskmgr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, taskmanager.o(i.__sti___15_TaskManager_cpp_tskmgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___15_TaskManager_cpp_tskmgr
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskManager::TaskManager()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskmanager.o(.init_array)
</UL>
<P><STRONG><a name="[3d]"></a>__sti___8_main_cpp_iic</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, main.o(i.__sti___8_main_cpp_iic))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __sti___8_main_cpp_iic &rArr; I2C::I2C(unsigned char, bool, unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2C::Init() &rArr; I2C::I2C_CHACK_BUSY_FIX(unsigned, unsigned short, unsigned short) &rArr; I2C::I2CGPIODeInit(unsigned short, unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(unsigned char, bool, unsigned, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_TypeDef*, unsigned short, GPIOMode_TypeDef, GPIOSpeed_TypeDef)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, bool, bool, bool, bool, unsigned short, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash::flash(unsigned, bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01::NRF24L01(SPI&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI::SPI(SPI_TypeDef*, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED::LED(GPIO&, bool)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(unsigned char, unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control::Control(PWM&, PWM&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::Communication(NRF24L01&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU::IMU(mpu6050&)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050::mpu6050(I2C&, unsigned short)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[70]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[71]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
